{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sourceWords","genIpsum","inputWords","textLength","max","strArr","i","push","length","Math","floor","random","join","MediaCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","blockText","state","classes","react_default","a","createElement","Card_default","className","card","CardContent_default","Typography_default","component","CardActions_default","Button_default","variant","color","button","onClick","React","Component","withStyles","theme","maxWidth","marginLeft","marginRight","marginTop","spacing","unit","media","height","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA2BMA,EAAc,CAClB,QAAS,YAAa,OAAQ,WAAY,OAC1C,UAAW,aAAc,YAAa,SACtC,SAAU,QAAS,WAAY,WAC/B,QAAS,UAAW,aAAc,cAClC,QAAS,SAAU,kBACnB,SAAU,YAAa,QAAS,cAChC,WAAY,cAAe,YAC3B,aAMIC,EAAW,SAACC,EAAYC,GAE5B,IADA,IALmBC,EAKfC,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAAYG,IAC9BD,EAAOE,KAAKL,GAPKE,EAOmBF,EAAWM,OAN1CC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMN,OAQ7C,OAAOC,EAAOO,KAAK,MAGfC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,YAAc,WACZP,EAAKQ,SAAS,CAAEC,UAAWvB,EAASD,EAAa,OANjDe,EAAKU,MAAQ,CACXD,UAAW,IAHIT,wEAWV,IACCW,EAAYR,KAAKJ,MAAjBY,QACR,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAWL,EAAQM,MACvBL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,UAAU,KAAKjB,KAAKO,MAAMD,YAExCG,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACED,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,QAAQ,YACRC,MAAM,UACNR,UAAWL,EAAQc,OACnBC,QAASvB,KAAKI,aAJhB,0BApBcoB,IAAMC,WAsCfC,uBA7EA,SAAAC,GAAK,MAAK,CACvBb,KAAM,CACJc,SAAU,IACVC,WAAY,OACZC,YAAa,OACdC,UAAgC,EAArBJ,EAAMK,QAAQC,MAE1BC,MAAO,CACLC,OAAQ,KAEVb,OAAQ,CACNO,WAAY,OACZC,YAAa,OACbM,aAAcT,EAAMK,QAAQC,QAgEjBP,CAAmB/B,GC3Ed0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.480848c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    maxWidth: 345,\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  \tmarginTop: theme.spacing.unit * 4\r\n  },\r\n  media: {\r\n    height: 140\r\n  },\r\n  button: {\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    marginBottom: theme.spacing.unit\r\n  }\r\n\t});\r\n\r\nconst sourceWords = [\r\n  \"flesh\", \"awareness\", \"Bene\", \"Atreides\", \"worm\",\r\n  \"Shaitan\", \"Shai-Hulud\", \"stillsuit\", \"desert\",\r\n  \"mentat\", \"ghola\", \"Tleilaxu\", \"gesserit\",\r\n  \"CHOAM\", \"melange\", \"prescience\", \"abomination\",\r\n  \"Ixian\", \"axlotl\", \"guild navigator\",\r\n  \"desert\", \"crysknife\", \"spice\", \"prana-bindu\",\r\n  \"Muad'Dib\", \"face dancer\", \"Harkonnen\",\r\n  \"sardaukar\"\r\n];\r\nconst getRandomInt = max => {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n};\r\n\r\nconst genIpsum = (inputWords, textLength) => {\r\n  let strArr = [];\r\n  for (let i = 0; i < textLength; i++) {\r\n    strArr.push(inputWords[getRandomInt(inputWords.length)]);\r\n  }\r\n  return strArr.join(\" \");\r\n};\r\n\r\nclass MediaCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blockText: \"\"\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({ blockText: genIpsum(sourceWords, 25) });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Card className={classes.card}>\r\n        <CardContent>\r\n          <Typography component=\"p\">{this.state.blockText}</Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={this.handleClick}\r\n          >\r\n            Generate Text\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nMediaCard.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(MediaCard);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}